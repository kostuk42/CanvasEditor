(()=>{"use strict";var e={994:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(507),a=t.n(r),i=t(476),o=t.n(i)()(a());o.push([e.id,'*,*::before,*::after{box-sizing:border-box;margin:0px;padding:0px}:visited{color:inherit}a,a:visited{text-decoration:none;display:block;color:inherit}body{color:#000;font-size:1rem;font-family:"Pangolin";font-style:normal;font-weight:400;letter-spacing:.1em}.button{display:flex;align-items:center;justify-content:center;cursor:pointer;font-weight:800;background-color:#ff0;border-radius:4px;border:none;padding:5px;margin:5px;line-height:1.1;letter-spacing:inherit;min-height:32px}b{color:#ff0;display:flex;align-items:center}#canvas{margin-top:50px;cursor:crosshair;border:dashed 5px #ff0}#rad{width:35px;height:30px;background:gray;border:none;color:#ff0;font-weight:inherit;margin:5px;text-align:center;border-radius:4px}#menu{padding:5px;height:auto;width:100%;top:0px;left:0px;background:#323232;position:fixed}#color{margin:0 3px 0;width:25px;min-height:30px;background:none;padding:0;border:1px solid #000;border:none;vertical-align:middle}#settings{display:flex;align-items:center}#profile_pic{display:none}',"",{version:3,sources:["webpack://./style.scss"],names:[],mappings:"AAAA,qBAGC,qBAAA,CACA,UAAA,CACA,WAAA,CAID,SACC,aAAA,CAGD,YACC,oBAAA,CACA,aAAA,CACE,aAAA,CAGH,KACE,UAAA,CACA,cAAA,CACA,sBAAA,CACA,iBAAA,CACA,eAAA,CACA,mBAAA,CAGF,QACG,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,cAAA,CACA,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,sBAAA,CACA,eAAA,CAIH,EACG,UAAA,CACA,YAAA,CACA,kBAAA,CAIH,QACG,eAAA,CACA,gBAAA,CACA,sBAAA,CAEH,KACG,UAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,UAAA,CACA,mBAAA,CACA,UAAA,CACA,iBAAA,CACA,iBAAA,CAEH,MACG,WAAA,CACA,WAAA,CACA,UAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CAIH,OACG,cAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,qBAAA,CAIH,UAEE,YAAA,CACA,kBAAA,CAGF,aACG,YAAA",sourcesContent:["*,\r\n*::before,\r\n*::after {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0px;\r\n\tpadding: 0px;\r\n}\r\n\r\n\r\n:visited {\r\n\tcolor: inherit;\t\r\n}\r\n\r\na, a:visited {\r\n\ttext-decoration: none;\r\n\tdisplay: block;\t\r\n   color: inherit;\r\n}\r\n\r\nbody {\r\n  color: black;\r\n  font-size: 1rem;\r\n  font-family: 'Pangolin';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  letter-spacing: 0.1em;\r\n \r\n}\r\n.button {\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   cursor: pointer;\r\n   font-weight: 800;\r\n   background-color: yellow;\r\n   border-radius: 4px;\r\n   border: none;\r\n   padding: 5px;\r\n   margin: 5px;\r\n   line-height: 1.1;\r\n   letter-spacing: inherit;\r\n   min-height: 32px;\r\n\r\n}\r\n\r\nb {\r\n   color: yellow;\r\n   display: flex;\r\n   align-items: center;\r\n}\r\n\r\n\r\n#canvas {\r\n   margin-top: 50px;\r\n   cursor: crosshair;\r\n   border: dashed 5px yellow;\r\n}\r\n#rad {\r\n   width: 35px;\r\n   height: 30px;\r\n   background: grey;\r\n   border: none;\r\n   color: yellow;\r\n   font-weight: inherit;\r\n   margin: 5px;\r\n   text-align: center;\r\n   border-radius: 4px;\r\n}\r\n#menu {\r\n   padding: 5px;\r\n   height: auto;\r\n   width: 100%;\r\n   top: 0px;\r\n   left: 0px;\r\n   background: #323232;\r\n   position: fixed;\r\n   \r\n}\r\n\r\n#color {\r\n   margin: 0 3px 0;\r\n   width: 25px;\r\n   min-height: 30px;\r\n   background: none;\r\n   padding: 0;\r\n   border: 1px solid black;\r\n   border: none;\r\n   vertical-align: middle;\r\n\r\n}\r\n\r\n#settings {\r\n \r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n#profile_pic {\r\n   display: none;\r\n}\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const s=o},476:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},507:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,a=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(e);!(o=(r=t.next()).done)&&(i.push(r.value),!n||i.length!==n);o=!0);}catch(e){s=!0,a=e}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[i].concat(u).concat([l]).join("\n")}return[i].join("\n")}},892:(e,n,t)=>{var r,a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),i=[];function o(e){for(var n=-1,t=0;t<i.length;t++)if(i[t].identifier===e){n=t;break}return n}function s(e,n){for(var t={},r=[],a=0;a<e.length;a++){var s=e[a],c=n.base?s[0]+n.base:s[0],l=t[c]||0,u="".concat(c," ").concat(l);t[c]=l+1;var A=o(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(i[A].references++,i[A].updater(d)):i.push({identifier:u,updater:g(d,n),references:1}),r.push(u)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,u=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function A(e,n,t,r){var a=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,a);else{var i=document.createTextNode(a),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(i,o[n]):e.appendChild(i)}}function d(e,n,t){var r=t.css,a=t.media,i=t.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,h=0;function g(e,n){var t,r,a;if(n.singleton){var i=h++;t=f||(f=c(n)),r=A.bind(null,t,i,!1),a=A.bind(null,t,i,!0)}else t=c(n),r=d.bind(null,t,n),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else a()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var a=o(t[r]);i[a].references--}for(var c=s(e,n),l=0;l<t.length;l++){var u=o(t[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=c}}}},622:(e,n,t)=>{e.exports=t.p+"aa1e968874b01bf0e243.woff2"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(892),n=t.n(e),r=t(994);function a(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n()(r.Z,{insert:"head",singleton:!1}),r.Z.locals,t(622);var i=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.canvas=document.getElementById("canvas"),this.ctx=document.getElementById("canvas").getContext("2d"),this.clearBtn=document.querySelector(".clear"),this.undoBtn=document.querySelector(".undo"),this.eraserBtn=document.querySelector(".eraser"),this.invert=document.querySelector(".invert")}var n,t;return n=e,(t=[{key:"canvasToWindowSize",value:function(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}},{key:"canvasWhite",value:function(){this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}},{key:"clearCanvas",value:function(e){var n=e.flags,t=e.stack,r=e.filesManage;this.canvasWhite(),n.isRepaint||(this.canvasToWindowSize(),t.setStory("clear"),r.updateHrefOnCanvas(this.canvas))}},{key:"colorInvert",value:function(e){for(var n=e.flags,t=e.stack,r=e.filesManage,a=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),i=0;i<a.data.length;i+=4)a.data[i]=255-a.data[i],a.data[i+1]=255-a.data[i+1],a.data[i+2]=255-a.data[i+2],a.data[i+3]=255;this.ctx.putImageData(a,0,0),n.isRepaint||(t.setStory("invert"),r.updateHrefOnCanvas(this.canvas))}},{key:"eraser",value:function(e){var n=e.flags,t=e.drawing;if(n.isOnErase=!n.isOnErase,n.isOnErase)return t.color="#ffffff",void(this.eraserBtn.style.color="#ffffff");t.color=t.col.value,this.eraserBtn.style.color="#000000"}},{key:"undo",value:function(e){var n=e.stack,t=e.flags,r=e.drawing,a=e.filesManage;if(n.removeLastCommand(),0===n.story.length)return this.undoBtn.disabled=!0,void this.clearCanvas(e);t.isRepaint=!0,this.clearCanvas(e);for(var i=0;i<n.story.length;i++){var o=n.story[i];switch(o){case"clear":this.clearCanvas(e);break;case"newImg":this.ctx.drawImage(a.newImg,0,0);break;case"invert":this.colorInvert(e);break;default:o.forEach((function(e){return r.draw(e)})),this.ctx.beginPath()}}t.isRepaint=!1}}])&&a(n.prototype,t),e}();function o(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.rad=document.getElementById("rad"),this.col=document.getElementById("color"),this.radius=document.getElementById("rad").value,this.color=document.getElementById("color").value,this.ctx=n.ctx,this.undoBtn=n.undoBtn,this.canvas=n.canvas}var n,t;return n=e,(t=[{key:"draw",value:function(e){var n=e.x,t=e.y,r=e.radius,a=e.color;n-=r,t-=r,this.ctx.fillStyle=this.ctx.strokeStyle=a,this.ctx.lineTo(n,t-50),this.ctx.lineWidth=2*r,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(n,t-50,r,0,2*Math.PI),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(n,t-50)}},{key:"drawPoint",value:function(e,n){var t=n.flags,r=n.stack;if(t.isErasing&&(this.color="#ffff"),t.isDragging){var a={x:e.pageX,y:e.pageY,radius:this.radius,color:this.color};this.draw(a),r.saveToLineStory(a)}}},{key:"engage",value:function(e,n){var t=n.flags;t.isOverCanvas&&(3===e.which&&(t.isErasing=!0),t.isDragging=!0)}},{key:"disengage",value:function(e,n){var t=n.flags,r=n.filesManage,a=n.stack;t.isOverCanvas&&(3===e.which&&(t.isErasing=!1,this.color=this.col.value),t.isDragging=!1,r.updateHrefOnCanvas(this.canvas),this.ctx.beginPath(),a.saveLineStory(),a.lineStory=[],this.undoBtn.disabled=!1)}}])&&o(n.prototype,t),e}();function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.newImg="",this.saveImg=document.getElementById("save"),this.loadImg=document.getElementById("profile_pic")}var n,t;return n=e,(t=[{key:"updateHrefOnCanvas",value:function(e){var n=this;e.toBlob((function(e){var t=URL.createObjectURL(e);URL.revokeObjectURL(n.saveImg.href),n.saveImg.href=t}),"image/jpeg",.95)}},{key:"loadImgFromHDD",value:function(e){var n=e.flags,t=e.myCanvas,r=e.stack,a=(e.filesManage,this.loadImg.files[0]);this.newImg=document.createElement("img"),this.newImg.src=window.URL.createObjectURL(a),t.clearCanvas(e),this.updateHrefOnCanvas(t.canvas),this.newImg.onload=function(){t.canvas.width=this.naturalWidth,t.canvas.height=this.naturalHeight,t.ctx.drawImage(this,0,0),n.isRepaint||r.setStory("newImg")}}}])&&c(n.prototype,t),e}();function u(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.story=[],this.lineStory=[]}var n,t;return n=e,(t=[{key:"getStory",value:function(){this.story=JSON.parse(localStorage.getItem("story"))||[]}},{key:"setStory",value:function(e){this.getStory(),this.story.push(e),localStorage.setItem("story",JSON.stringify(this.story))}},{key:"saveLineStory",value:function(){this.setStory(this.lineStory)}},{key:"removeStory",value:function(){this.clearLocalStory(),localStorage.removeItem("story")}},{key:"saveToLineStory",value:function(e){this.lineStory.push(e)}},{key:"clearLocalStory",value:function(){this.story=[],this.lineStory=[]}},{key:"removeLastCommand",value:function(){this.getStory(),this.story.pop(),localStorage.setItem("story",JSON.stringify(this.story))}}])&&u(n.prototype,t),e}(),d=new i,f=new s(d),h=new l,g=new A,v={isOverCanvas:!1,isDragging:!1,isRepaint:!1,isErasing:!1,isOnErase:!1},p={flags:v,myCanvas:d,drawing:f,filesManage:h,stack:g};d.undoBtn.onclick=function(){return d.undo(p)},h.loadImg.oninput=function(){return h.loadImgFromHDD(p)},d.clearBtn.onclick=function(){return d.clearCanvas(p)},f.rad.oninput=function(){return f.radius=f.rad.value},f.col.oninput=function(){return f.color=f.col.value},d.eraserBtn.onclick=function(){return d.eraser(p)},d.invert.onclick=function(){return d.colorInvert(p)},d.canvas.onmouseover=function(){return v.isOverCanvas=!0},d.canvas.addEventListener("mousedown",(function(e){return f.engage(e,p)})),d.canvas.addEventListener("mousedown",(function(e){return f.drawPoint(e,p)})),d.canvas.onmouseup=function(e){return f.disengage(e,p)},d.canvas.addEventListener("mousemove",(function(e){return f.drawPoint(e,p)})),g.removeStory(),d.clearCanvas(p)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,