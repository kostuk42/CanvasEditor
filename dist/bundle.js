(()=>{"use strict";var n={994:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(507),o=t.n(r),i=t(476),a=t.n(i)()(o());a.push([n.id,"*,*::before,*::after{box-sizing:border-box;margin:0px;padding:0px}:visited{color:inherit}a,a:visited{text-decoration:none;display:block;color:inherit}.button{cursor:pointer}body{color:#000;font-size:1rem}.button{display:flex;align-items:center;justify-content:center;cursor:pointer;font-weight:800;background-color:#ff0;border-radius:4px;border:none;padding:5px;margin:5px;line-height:1.1;min-height:32px}b{color:#ff0;display:flex;align-items:center}#canvas{margin-top:50px;cursor:crosshair;border:dashed 5px #ff0}#rad{width:35px;height:30px;background:gray;border:none;color:#ff0;font-weight:inherit;margin:5px;text-align:center;border-radius:4px}#menu{padding:5px;height:auto;width:100%;top:0px;left:0px;background:#323232;position:fixed}#color{margin:0 3px 0;width:25px;min-height:30px;background:none;padding:0;border:1px solid #000;border:none;vertical-align:middle}#settings{display:flex;align-items:center}.visually-hidden{position:absolute !important;clip:rect(1px 1px 1px 1px);clip:rect(1px, 1px, 1px, 1px);padding:0 !important;border:0 !important;height:1px !important;width:1px !important;overflow:hidden}.download{display:inline-block}","",{version:3,sources:["webpack://./style.scss"],names:[],mappings:"AAAA,qBAGC,qBAAA,CACA,UAAA,CACA,WAAA,CAID,SACC,aAAA,CAGD,YACC,oBAAA,CACA,aAAA,CACC,aAAA,CAIF,QACG,cAAA,CAEH,KACE,UAAA,CACA,cAAA,CAGF,QACE,YAAA,CACA,kBAAA,CACA,sBAAA,CACC,cAAA,CACA,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CAIH,EACG,UAAA,CACA,YAAA,CACA,kBAAA,CAIH,QACG,eAAA,CACA,gBAAA,CACA,sBAAA,CAEH,KACG,UAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,UAAA,CACA,mBAAA,CACA,UAAA,CACA,iBAAA,CACA,iBAAA,CAEH,MACG,WAAA,CACA,WAAA,CACA,UAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CAIH,OACG,cAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,qBAAA,CAIH,UAEE,YAAA,CACA,kBAAA,CAGF,iBAEE,4BAAA,CACA,0BAAA,CACA,6BAAA,CACA,oBAAA,CACA,mBAAA,CACA,qBAAA,CACA,oBAAA,CACA,eAAA,CAEF,UACG,oBAAA",sourcesContent:["*,\r\n*::before,\r\n*::after {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0px;\r\n\tpadding: 0px;\r\n}\r\n\r\n\r\n:visited {\r\n\tcolor: inherit;\t\r\n}\r\n\r\na, a:visited {\r\n\ttext-decoration: none;\r\n\tdisplay: block;\t\r\n  color: inherit;\r\n}\r\n\r\n\r\n.button {\r\n   cursor: pointer;\r\n}\r\nbody {\r\n  color: black;\r\n  font-size: 1rem;\r\n \r\n}\r\n.button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n   cursor: pointer;\r\n   font-weight: 800;\r\n   background-color: yellow;\r\n   border-radius: 4px;\r\n   border: none;\r\n   padding: 5px;\r\n   margin: 5px;\r\n   line-height: 1.1;\r\n   min-height: 32px;\r\n\r\n}\r\n\r\nb {\r\n   color: yellow;\r\n   display: flex;\r\n   align-items: center;\r\n}\r\n\r\n\r\n#canvas {\r\n   margin-top: 50px;\r\n   cursor: crosshair;\r\n   border: dashed 5px yellow;\r\n}\r\n#rad {\r\n   width: 35px;\r\n   height: 30px;\r\n   background: grey;\r\n   border: none;\r\n   color: yellow;\r\n   font-weight: inherit;\r\n   margin: 5px;\r\n   text-align: center;\r\n   border-radius: 4px;\r\n}\r\n#menu {\r\n   padding: 5px;\r\n   height: auto;\r\n   width: 100%;\r\n   top: 0px;\r\n   left: 0px;\r\n   background: #323232;\r\n   position: fixed;\r\n   \r\n}\r\n\r\n#color {\r\n   margin: 0 3px 0;\r\n   width: 25px;\r\n   min-height: 30px;\r\n   background: none;\r\n   padding: 0;\r\n   border: 1px solid black;\r\n   border: none;\r\n   vertical-align: middle;\r\n\r\n}\r\n\r\n#settings {\r\n \r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.visually-hidden \r\n{\r\n  position: absolute !important;\r\n  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */\r\n  clip: rect(1px, 1px, 1px, 1px);\r\n  padding: 0 !important;\r\n  border: 0 !important;\r\n  height: 1px !important;\r\n  width: 1px !important;\r\n  overflow: hidden;\r\n}\r\n.download {\r\n   display: inline-block;\r\n}\r\n\r\n"],sourceRoot:""}]);const s=a},476:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},507:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},892:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function a(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var s=n[o],c=e.base?s[0]+e.base:s[0],l=t[c]||0,A="".concat(c," ").concat(l);t[c]=l+1;var u=a(A),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(d)):i.push({identifier:A,updater:p(d,e),references:1}),r.push(A)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,A=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function u(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=A(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function d(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,h=0;function p(n,e){var t,r,o;if(e.singleton){var i=h++;t=f||(f=c(e)),r=u.bind(null,t,i,!1),o=u.bind(null,t,i,!0)}else t=c(e),r=d.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=a(t[r]);i[o].references--}for(var c=s(n,e),l=0;l<t.length;l++){var A=a(t[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}t=c}}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(892),e=t.n(n),r=t(994);function o(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var i=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.canvas=document.getElementById("canvas"),this.ctx=document.getElementById("canvas").getContext("2d"),this.clearBtn=document.querySelector(".clear"),this.undoBtn=document.querySelector(".undo"),this.eraserBtn=document.querySelector(".eraser"),this.invert=document.querySelector(".invert")}var e,t;return e=n,(t=[{key:"canvasToWindowSize",value:function(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}},{key:"canvasWhite",value:function(n){this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),console.log("bleach")}},{key:"clearCanvas",value:function(n,e,t){var r=n.isRepaint;this.canvasToWindowSize(),this.canvasWhite(t),r||(e.setStory("clear"),t.updateHrefOnCanvas(this.canvas))}},{key:"colorInvert",value:function(n,e,t){for(var r=n.isRepaint,o=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),i=0;i<o.data.length;i+=4)o.data[i]=255-o.data[i],o.data[i+1]=255-o.data[i+1],o.data[i+2]=255-o.data[i+2],o.data[i+3]=255;this.ctx.putImageData(o,0,0),r||(e.setStory("invert"),t.updateHrefOnCanvas(this.canvas))}},{key:"eraser",value:function(n,e){if(n.isOnErase=!n.isOnErase,n.isOnErase)return e.color="#ffffff",void(this.eraserBtn.style.color="#ffffff");e.color=e.col.value,this.eraserBtn.style.color="#000000"}},{key:"undo",value:function(n,e,t,r){if(n.removeLastCommand(),0!==n.story.length){e.isRepaint=!0,this.clearCanvas(e,n,r);for(var o=0;o<n.story.length;o++){var i=n.story[o];switch(i){case"clear":this.clearCanvas(e,n,r);break;case"newImg":this.ctx.drawImage(r.newImg,0,0);break;case"invert":this.colorInvert(e,n);break;default:i.forEach((function(n){return t.draw(n)})),this.ctx.beginPath()}}}else this.undoBtn.disabled=!0}}])&&o(e.prototype,t),n}();function a(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var s=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.rad=document.getElementById("rad"),this.col=document.getElementById("color"),this.radius=document.getElementById("rad").value,this.color=document.getElementById("color").value,this.ctx=e.ctx,this.undoBtn=e.undoBtn,this.canvas=e.canvas}var e,t;return e=n,(t=[{key:"draw",value:function(n){var e=n.x,t=n.y,r=n.radius,o=n.color;e-=r,t-=r,this.ctx.fillStyle=this.ctx.strokeStyle=o,this.ctx.lineTo(e,t-50),this.ctx.lineWidth=2*r,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(e,t-50,r,0,2*Math.PI),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(e,t-50)}},{key:"drawPoint",value:function(n,e,t){if(e.isErasing&&(this.color="#ffff"),e.isDragging){var r={x:n.pageX,y:n.pageY,radius:this.radius,color:this.color};this.draw(r),t.saveToLineStory(r)}}},{key:"engage",value:function(n,e){e.isOverCanvas&&(3===n.which&&(e.isErasing=!0),e.isDragging=!0)}},{key:"disengage",value:function(n,e,t,r){e.isOverCanvas&&(3===n.which&&(e.isErasing=!1,this.color=this.col.value),e.isDragging=!1,t.updateHrefOnCanvas(this.canvas),this.ctx.beginPath(),r.saveLineStory(),r.lineStory=[],this.undoBtn.disabled=!1)}}])&&a(e.prototype,t),n}();function c(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var l=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.newImg="",this.saveImg=document.getElementById("save"),this.loadImg=document.getElementById("profile_pic")}var e,t;return e=n,(t=[{key:"updateHrefOnCanvas",value:function(n){var e=this;n.toBlob((function(n){var t=URL.createObjectURL(n);URL.revokeObjectURL(e.saveImg.href),e.saveImg.href=t}),"image/jpeg",.95)}},{key:"loadImgFromHDD",value:function(n,e,t){var r=n.isRepaint,o=this.loadImg.files[0];this.newImg=document.createElement("img"),this.newImg.src=window.URL.createObjectURL(o),e.canvasWhite(this),this.updateHrefOnCanvas(e.canvas),this.newImg.onload=function(){e.canvas.width=this.naturalWidth,e.canvas.height=this.naturalHeight,e.ctx.drawImage(this,0,0),r||(t.removeStory(),console.log("removed"),console.log(t.story),t.setStory("newImg"))}}}])&&c(e.prototype,t),n}();function A(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var u=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.story=[],this.lineStory=[]}var e,t;return e=n,(t=[{key:"getStory",value:function(){this.story=JSON.parse(localStorage.getItem("story"))||[]}},{key:"setStory",value:function(n){this.getStory(),this.story.push(n),localStorage.setItem("story",JSON.stringify(this.story))}},{key:"saveLineStory",value:function(){this.setStory(this.lineStory)}},{key:"removeStory",value:function(){this.clearLocalStory(),localStorage.removeItem("story")}},{key:"saveToLineStory",value:function(n){this.lineStory.push(n)}},{key:"clearLocalStory",value:function(){this.story=[],this.lineStory=[]}},{key:"removeLastCommand",value:function(){this.getStory(),this.story.pop(),localStorage.setItem("story",JSON.stringify(this.story))}}])&&A(e.prototype,t),n}(),d=new i,f=new s(d),h=new l,p=new u,v={isOverCanvas:!1,isDragging:!1,isRepaint:!1,isErasing:!1,isOnErase:!1};d.undoBtn.onclick=function(){return d.undo(p,v,f,h)},h.loadImg.oninput=function(){return h.loadImgFromHDD(v,d,p)},d.clearBtn.onclick=function(){return d.clearCanvas(v,p,h)},f.rad.oninput=function(){return f.radius=f.rad.value},f.col.oninput=function(){return f.color=f.col.value},d.eraserBtn.onclick=function(){return d.eraser(v,f)},d.invert.onclick=function(){return d.colorInvert(v,p,h)},d.canvas.onmouseover=function(){return v.isOverCanvas=!0},d.canvas.addEventListener("mousedown",(function(n){return f.engage(n,v)})),d.canvas.addEventListener("mousedown",(function(n){return f.drawPoint(n,v,p)})),d.canvas.onmouseup=function(n){return f.disengage(n,v,h,p)},d.canvas.addEventListener("mousemove",(function(n){return f.drawPoint(n,v,p)})),p.removeStory(),d.clearCanvas(v,p,h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,