(()=>{"use strict";var n={994:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(507),i=t.n(r),a=t(476),o=t.n(a)()(i());o.push([n.id,'*,*::before,*::after{box-sizing:border-box;margin:0px;padding:0px}:visited{color:inherit}a,a:visited{text-decoration:none;display:block;color:inherit}body{color:#000;font-size:1rem;font-family:"Pangolin";font-style:normal;font-weight:400;letter-spacing:.1em}.button{display:flex;align-items:center;justify-content:center;cursor:pointer;font-weight:800;background-color:#ff0;border-radius:4px;border:none;padding:5px;margin:5px;line-height:1.1;letter-spacing:inherit;min-height:32px}b{color:#ff0;display:flex;align-items:center}#canvas{margin-top:50px;cursor:crosshair;border:dashed 5px #ff0}#rad{width:35px;height:30px;background:gray;border:none;color:#ff0;font-weight:inherit;margin:5px;text-align:center;border-radius:4px}#menu{padding:5px;height:auto;width:100%;top:0px;left:0px;background:#323232;position:fixed}#color{margin:0 3px 0;width:25px;min-height:30px;background:none;padding:0;border:1px solid #000;border:none;vertical-align:middle}#settings{display:flex;align-items:center}#profile_pic{display:none}',"",{version:3,sources:["webpack://./style.scss"],names:[],mappings:"AAAA,qBAGC,qBAAA,CACA,UAAA,CACA,WAAA,CAID,SACC,aAAA,CAGD,YACC,oBAAA,CACA,aAAA,CACE,aAAA,CAGH,KACE,UAAA,CACA,cAAA,CACA,sBAAA,CACA,iBAAA,CACA,eAAA,CACA,mBAAA,CAGF,QACG,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,cAAA,CACA,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,WAAA,CACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,sBAAA,CACA,eAAA,CAIH,EACG,UAAA,CACA,YAAA,CACA,kBAAA,CAIH,QACG,eAAA,CACA,gBAAA,CACA,sBAAA,CAEH,KACG,UAAA,CACA,WAAA,CACA,eAAA,CACA,WAAA,CACA,UAAA,CACA,mBAAA,CACA,UAAA,CACA,iBAAA,CACA,iBAAA,CAEH,MACG,WAAA,CACA,WAAA,CACA,UAAA,CACA,OAAA,CACA,QAAA,CACA,kBAAA,CACA,cAAA,CAIH,OACG,cAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,qBAAA,CAIH,UAEE,YAAA,CACA,kBAAA,CAGF,aACG,YAAA",sourcesContent:["*,\r\n*::before,\r\n*::after {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0px;\r\n\tpadding: 0px;\r\n}\r\n\r\n\r\n:visited {\r\n\tcolor: inherit;\t\r\n}\r\n\r\na, a:visited {\r\n\ttext-decoration: none;\r\n\tdisplay: block;\t\r\n   color: inherit;\r\n}\r\n\r\nbody {\r\n  color: black;\r\n  font-size: 1rem;\r\n  font-family: 'Pangolin';\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  letter-spacing: 0.1em;\r\n \r\n}\r\n.button {\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   cursor: pointer;\r\n   font-weight: 800;\r\n   background-color: yellow;\r\n   border-radius: 4px;\r\n   border: none;\r\n   padding: 5px;\r\n   margin: 5px;\r\n   line-height: 1.1;\r\n   letter-spacing: inherit;\r\n   min-height: 32px;\r\n\r\n}\r\n\r\nb {\r\n   color: yellow;\r\n   display: flex;\r\n   align-items: center;\r\n}\r\n\r\n\r\n#canvas {\r\n   margin-top: 50px;\r\n   cursor: crosshair;\r\n   border: dashed 5px yellow;\r\n}\r\n#rad {\r\n   width: 35px;\r\n   height: 30px;\r\n   background: grey;\r\n   border: none;\r\n   color: yellow;\r\n   font-weight: inherit;\r\n   margin: 5px;\r\n   text-align: center;\r\n   border-radius: 4px;\r\n}\r\n#menu {\r\n   padding: 5px;\r\n   height: auto;\r\n   width: 100%;\r\n   top: 0px;\r\n   left: 0px;\r\n   background: #323232;\r\n   position: fixed;\r\n   \r\n}\r\n\r\n#color {\r\n   margin: 0 3px 0;\r\n   width: 25px;\r\n   min-height: 30px;\r\n   background: none;\r\n   padding: 0;\r\n   border: 1px solid black;\r\n   border: none;\r\n   vertical-align: middle;\r\n\r\n}\r\n\r\n#settings {\r\n \r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n#profile_pic {\r\n   display: none;\r\n}\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const s=o},476:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},507:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,i=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,i,a=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);o=!0);}catch(n){s=!0,i=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw i}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[1],o=i[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[a].concat(u).concat([l]).join("\n")}return[a].join("\n")}},892:(n,e,t)=>{var r,i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),a=[];function o(n){for(var e=-1,t=0;t<a.length;t++)if(a[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],i=0;i<n.length;i++){var s=n[i],c=e.base?s[0]+e.base:s[0],l=t[c]||0,u="".concat(c," ").concat(l);t[c]=l+1;var A=o(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(a[A].references++,a[A].updater(d)):a.push({identifier:u,updater:v(d,e),references:1}),r.push(u)}return r}function c(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var a=t.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var o=i(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var l,u=(l=[],function(n,e){return l[n]=e,l.filter(Boolean).join("\n")});function A(n,e,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=u(e,i);else{var a=document.createTextNode(i),o=n.childNodes;o[e]&&n.removeChild(o[e]),o.length?n.insertBefore(a,o[e]):n.appendChild(a)}}function d(n,e,t){var r=t.css,i=t.media,a=t.sourceMap;if(i?n.setAttribute("media",i):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var f=null,h=0;function v(n,e){var t,r,i;if(e.singleton){var a=h++;t=f||(f=c(e)),r=A.bind(null,t,a,!1),i=A.bind(null,t,a,!0)}else t=c(e),r=d.bind(null,t,e),i=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else i()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var i=o(t[r]);a[i].references--}for(var c=s(n,e),l=0;l<t.length;l++){var u=o(t[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}t=c}}}},622:(n,e,t)=>{n.exports=t.p+"aa1e968874b01bf0e243.woff2"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{var n=t(892),e=t.n(n),r=t(994);function i(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}e()(r.Z,{insert:"head",singleton:!1}),r.Z.locals,t(622);var a=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.canvas=document.getElementById("canvas"),this.ctx=document.getElementById("canvas").getContext("2d"),this.clearBtn=document.querySelector(".clear"),this.undoBtn=document.querySelector(".undo"),this.eraserBtn=document.querySelector(".eraser"),this.invert=document.querySelector(".invert")}var e,t;return e=n,(t=[{key:"canvasToWindowSize",value:function(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}},{key:"canvasWhite",value:function(n){this.ctx.fillStyle="white",this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height)}},{key:"clearCanvas",value:function(n,e,t){this.canvasToWindowSize(),this.canvasWhite(t),n.isRepaint||(e.setStory("clear"),t.updateHrefOnCanvas(this.canvas))}},{key:"colorInvert",value:function(n,e,t){for(var r=n.isRepaint,i=this.ctx.getImageData(0,0,this.canvas.width,this.canvas.height),a=0;a<i.data.length;a+=4)i.data[a]=255-i.data[a],i.data[a+1]=255-i.data[a+1],i.data[a+2]=255-i.data[a+2],i.data[a+3]=255;this.ctx.putImageData(i,0,0),r||(e.setStory("invert"),t.updateHrefOnCanvas(this.canvas))}},{key:"eraser",value:function(n,e){if(n.isOnErase=!n.isOnErase,n.isOnErase)return e.color="#ffffff",void(this.eraserBtn.style.color="#ffffff");e.color=e.col.value,this.eraserBtn.style.color="#000000"}},{key:"undo",value:function(n,e,t,r){if(n.removeLastCommand(),0===n.story.length)return this.undoBtn.disabled=!0,void this.clearCanvas(e,n,r);e.isRepaint=!0,this.clearCanvas(e,n,r);for(var i=0;i<n.story.length;i++){var a=n.story[i];switch(a){case"clear":this.clearCanvas(e,n,r);break;case"newImg":this.ctx.drawImage(r.newImg,0,0);break;case"invert":this.colorInvert(e,n);break;default:a.forEach((function(n){return t.draw(n)})),this.ctx.beginPath()}}e.isRepaint=!1}}])&&i(e.prototype,t),n}();function o(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var s=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.rad=document.getElementById("rad"),this.col=document.getElementById("color"),this.radius=document.getElementById("rad").value,this.color=document.getElementById("color").value,this.ctx=e.ctx,this.undoBtn=e.undoBtn,this.canvas=e.canvas}var e,t;return e=n,(t=[{key:"draw",value:function(n){var e=n.x,t=n.y,r=n.radius,i=n.color;e-=r,t-=r,this.ctx.fillStyle=this.ctx.strokeStyle=i,this.ctx.lineTo(e,t-50),this.ctx.lineWidth=2*r,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(e,t-50,r,0,2*Math.PI),this.ctx.fill(),this.ctx.beginPath(),this.ctx.moveTo(e,t-50)}},{key:"drawPoint",value:function(n,e,t){if(e.isErasing&&(this.color="#ffff"),e.isDragging){var r={x:n.pageX,y:n.pageY,radius:this.radius,color:this.color};this.draw(r),t.saveToLineStory(r)}}},{key:"engage",value:function(n,e){e.isOverCanvas&&(3===n.which&&(e.isErasing=!0),e.isDragging=!0)}},{key:"disengage",value:function(n,e,t,r){e.isOverCanvas&&(3===n.which&&(e.isErasing=!1,this.color=this.col.value),e.isDragging=!1,t.updateHrefOnCanvas(this.canvas),this.ctx.beginPath(),r.saveLineStory(),r.lineStory=[],this.undoBtn.disabled=!1)}}])&&o(e.prototype,t),n}();function c(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var l=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.newImg="",this.saveImg=document.getElementById("save"),this.loadImg=document.getElementById("profile_pic")}var e,t;return e=n,(t=[{key:"updateHrefOnCanvas",value:function(n){var e=this;n.toBlob((function(n){var t=URL.createObjectURL(n);URL.revokeObjectURL(e.saveImg.href),e.saveImg.href=t}),"image/jpeg",.95)}},{key:"loadImgFromHDD",value:function(n,e,t){var r=this.loadImg.files[0];this.newImg=document.createElement("img"),this.newImg.src=window.URL.createObjectURL(r),e.clearCanvas(n,t,this),this.updateHrefOnCanvas(e.canvas),this.newImg.onload=function(){e.canvas.width=this.naturalWidth,e.canvas.height=this.naturalHeight,e.ctx.drawImage(this,0,0),n.isRepaint||t.setStory("newImg")}}}])&&c(e.prototype,t),n}();function u(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}var A=function(){function n(){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.story=[],this.lineStory=[]}var e,t;return e=n,(t=[{key:"getStory",value:function(){this.story=JSON.parse(localStorage.getItem("story"))||[]}},{key:"setStory",value:function(n){this.getStory(),this.story.push(n),localStorage.setItem("story",JSON.stringify(this.story))}},{key:"saveLineStory",value:function(){this.setStory(this.lineStory)}},{key:"removeStory",value:function(){this.clearLocalStory(),localStorage.removeItem("story")}},{key:"saveToLineStory",value:function(n){this.lineStory.push(n)}},{key:"clearLocalStory",value:function(){this.story=[],this.lineStory=[]}},{key:"removeLastCommand",value:function(){this.getStory(),this.story.pop(),localStorage.setItem("story",JSON.stringify(this.story))}}])&&u(e.prototype,t),n}(),d=new a,f=new s(d),h=new l,v=new A,p={isOverCanvas:!1,isDragging:!1,isRepaint:!1,isErasing:!1,isOnErase:!1};d.undoBtn.onclick=function(){return d.undo(v,p,f,h)},h.loadImg.oninput=function(){return h.loadImgFromHDD(p,d,v)},d.clearBtn.onclick=function(){return d.clearCanvas(p,v,h)},f.rad.oninput=function(){return f.radius=f.rad.value},f.col.oninput=function(){return f.color=f.col.value},d.eraserBtn.onclick=function(){return d.eraser(p,f)},d.invert.onclick=function(){return d.colorInvert(p,v,h)},d.canvas.onmouseover=function(){return p.isOverCanvas=!0},d.canvas.addEventListener("mousedown",(function(n){return f.engage(n,p)})),d.canvas.addEventListener("mousedown",(function(n){return f.drawPoint(n,p,v)})),d.canvas.onmouseup=function(n){return f.disengage(n,p,h,v)},d.canvas.addEventListener("mousemove",(function(n){return f.drawPoint(n,p,v)})),v.removeStory(),d.clearCanvas(p,v,h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,